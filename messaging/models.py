
import datetime, math
from django.utils import timezone
from django.db import models

#from properties.models import Property, PropertyActivity

# ================================================================
class Contact(models.Model):
    nameFirst   = models.CharField(max_length = 30)
    nameLast    = models.CharField(max_length = 30)
    nameMiddle  = models.CharField(max_length = 30, blank = True)

    isOwner     = models.BooleanField(default=False)
    isTenant    = models.BooleanField(default=False)
    isStaff     = models.BooleanField(default=False)
    isAdmin     = models.BooleanField(default=False)

    isArchived  = models.BooleanField(default=False)

    GENDER_MALE = 'm'
    GENDER_FEMALE = 'f'
    GENDER_OTHER = 'x'
    GENDER_CHOICES = (
        (GENDER_MALE, 'Male'),
        (GENDER_FEMALE, 'Female'),
        (GENDER_OTHER, 'Other'),
    )
    gender = models.CharField(max_length = 1, choices=GENDER_CHOICES, blank=True, null=True)

    SALUTATION_CHOICES = (
        ('', ''),
        ('Mr', 'Mr'),
        ('Mrs', 'Mrs'),
        ('Ms', 'Ms'),
        ('Miss', 'Miss'),
        ('Dr', 'Dr'),
        ('Mx', 'Mx'),
    )
    salutation = models.CharField(max_length = 6, choices=SALUTATION_CHOICES, blank=True, null=True)

    phone1      = models.CharField(max_length = 20, blank = True, null = True)
    phone1_type = models.CharField(max_length = 20, blank = True, null = True)
    phone2      = models.CharField(max_length = 20, blank = True, null = True)
    phone2_type = models.CharField(max_length = 20, blank = True, null = True)
    phone3      = models.CharField(max_length = 20, blank = True, null = True)
    phone3_type = models.CharField(max_length = 20, blank = True, null = True)

    email1		= models.CharField(max_length = 52, blank=True, null=True)
    email1_type = models.CharField(max_length = 20, blank = True, null = True)
    email2		= models.CharField(max_length = 52, blank=True, null=True)
    email2_type = models.CharField(max_length = 20, blank = True, null = True)

    addressStreet1	= models.CharField(max_length=50, blank=True, null=True)
    addressStreet2	= models.CharField(max_length=20, blank=True, null=True)
    addressCity		= models.CharField(max_length=30, blank=True, null=True)
    addressState	= models.CharField(max_length=20, blank=True, null=True)
    addressZipcode	= models.CharField(max_length=10, blank=True, null=True)
    addressCountry	= models.CharField(max_length=30, blank=True, null=True)

    dateOfBirth = models.DateField(blank=True, null=True)
    ssn = models.CharField(max_length = 11, blank=True, null=True)
    driversLicenseNumber = models.CharField(max_length=20, blank=True, null=True)
    driversLicenseState	= models.CharField(max_length=2, blank=True, null=True)

    taxPayerName    = models.CharField(max_length=50, blank=True, null=True)
    taxPayerID      = models.CharField(max_length=12, blank=True, null=True)

    notes           = models.TextField(blank=True, null=True)
    
    autoGenerated   = models.BooleanField(default=True)     # True: was created by a message sent in automatically by the system
    approvedByHuman = models.BooleanField(default=True)     # True: a human has confirmed the information in this is sound


    def age(self):
        today = datetime.date.today()
        if (self.dateOfBirth != None):
            diff = today - self.dateOfBirth
            return math.floor(diff.days / 365) 
        else:
            return None 

    def nameFull(self):
        return self.nameFirst +' '+ self.nameLast

    def nameReversed(self):
        return self.nameLast +', '+ self.nameFirst

    def name(self):
        return nameFull()

    def __str__(self):
        return self.nameFirst +' '+ self.nameLast
# ================================================================
class Message(models.Model):
    prop            = models.ForeignKey('properties.Property', on_delete=None, blank=True, null=True)

    fromContact     = models.ForeignKey(Contact, on_delete=None, blank=True, null=True, related_name="mesages_from")
    fromEmail       = models.CharField(max_length = 254)
    fromEmailName   = models.CharField(max_length = 100, blank = True)

    toContact       = models.ForeignKey(Contact, on_delete=None, blank=True, null=True, related_name="mesages_to")
    toEmail         = models.CharField(max_length = 254)
    toEmailName     = models.CharField(max_length = 100, blank = True)

    cc = models.CharField(max_length = 1000, blank = True)
    bcc = models.CharField(max_length = 1000, blank = True)

    subject = models.CharField(max_length = 80, blank = True)
    body = models.TextField(blank = True)

    isNew = models.BooleanField(default = True)
    isArchived = models.BooleanField(default = False)


    created_on = models.DateTimeField(auto_now_add = True)
    updated_on = models.DateTimeField(auto_now = True)

    def fromName(self):
        result = self.fromEmail
        if self.fromEmailName != '':
            result = self.fromEmailName
        return result

    def toName(self):
        return (self.toEmailName, self.toEmail)[self.toEmailName != None]
        
    def readState(self):
        return ('unread', 'read')[self.isNew == True]

    def markAsRead(self):
        self.isNew = False
        self.save()

    def createdOn(self):
        returnValue = 0

        if self.created_on:
            now = datetime.datetime.now().replace(tzinfo=None)
            timediff = now - self.created_on.replace(tzinfo=None)
            secsDiff = timediff.total_seconds()

            if secsDiff/60 < 60:			#minutes
                returnValue = str(round(secsDiff/60)) +' mins ago'
            elif secsDiff/60/60 < 24:		#hours
                returnValue = str(round(secsDiff/60/60)) +' hours ago'
            elif secsDiff/60/60/24 < 30:	#days
                returnValue = str(round(secsDiff/60/60/24)) +' days ago'
            else:							#months
                returnValue = str(round(secsDiff/60/60/24/30)) +' months ago'


        return returnValue

    def was_created_recently(self):
        now = timezone.now()
        return now - datetime.timedelta(days=3) <= self.created_on <= now
        
    def __str__(self):
        return self.subject +' (from: '+ self.fromEmail +')'

# ================================================================
class Thread(models.Model):
    requesterContactID = models.ForeignKey(Contact, on_delete=None, blank=True, null=True, related_name="threads_requestor")
    threadType = models.CharField(max_length = 20)
    propertyID = models.ForeignKey('properties.Property')

    isArchived = models.BooleanField(default=False)

    assignedToContactID = models.ForeignKey(Contact, on_delete=None, blank=True, null=True, limit_choices_to={'isStaff': True}, related_name="threads_assigned")
    subject = models.CharField(max_length = 80)
    description = models.TextField(blank = True)
    created_on = models.DateTimeField(auto_now_add = True)
    updated_on = models.DateTimeField(auto_now = True)

    PRIORITY_URGENT = 100       # urgent            Immediate attention - undismissable alert banner in system
    PRIORITY_HIGH	= 80        # high              Immediate attention - dismissable popup alert
    PRIORITY_MEDIUM	= 60        # medium - default  Attention needed    - dismissable popup alert
    PRIORITY_LOW	= 40        # low               Attention needed    - short term popup alert
    PRIORITY_INFO   = 20        # info              Shows up in reports - no popup alert
    PRIORITY_LOG    = 10        # System Log        Shows up in reports - no popup alert
    priority = models.PositiveSmallIntegerField(default=PRIORITY_MEDIUM, choices=(
        (PRIORITY_URGENT,   'Urgent'),
        (PRIORITY_HIGH,     'High'),
        (PRIORITY_MEDIUM,   'Medium'),
        (PRIORITY_LOW,      'Low'),
        (PRIORITY_INFO,     'Info'),
        (PRIORITY_LOG,      'System Log'),
    ))


    STATUS_OPEN = 'open'
    STATUS_PENDING = 'pending'
    STATUS_RESOLVED = 'resolved'
    STATUS_CLOSED = 'closed'
    STATUS_WAITING = 'waiting'
    status = (
            (STATUS_OPEN, 'open'),
            (STATUS_PENDING, 'pending'),
            (STATUS_RESOLVED, 'resolved'),
            (STATUS_CLOSED, 'closed'),
            (STATUS_WAITING, 'waiting'),
        )